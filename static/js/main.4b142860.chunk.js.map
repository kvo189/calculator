{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["isOperator","isOperatorPositive","Navbar","className","href","React","Component","Button","id","this","props","value","onClick","App","state","display","currentNum","previousInput","evaluated","handleClear","bind","handleNumbers","handleOperators","handleEquals","handleDecimal","handleZero","setState","e","val","target","length","nextOp","test","slice","eval","toString","includes","displayFontSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b142860.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst isOperator = /[*/+-]/,\nisOperatorPositive = /[*/+]/;\n\nclass Navbar extends React.Component {\n  render (){\n    return (\n      <div className=\"navbar\">\n        <a href=\"https://github.com/kvo189/calculator\">View On Github</a>\n      </div>\n    );\n  }\n}\n\nclass Button extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<button id = {this.props.id} value={this.props.value} onClick={this.props.onClick} className={this.props.className}>\n\t\t\t\t{this.props.value}\n\t\t\t</button>\n\t\t)\n\t}\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\t\tthis.state = {\n\t\t\tdisplay: '0',\n      currentNum: '0',\n\t\t\tpreviousInput: null,\n\t\t\tevaluated: true\n\t\t}\n\t\tthis.handleClear = this.handleClear.bind(this);\n\t\tthis.handleNumbers = this.handleNumbers.bind(this);\n\t\tthis.handleOperators = this.handleOperators.bind(this);\n\t\tthis.handleEquals = this.handleEquals.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleZero = this.handleZero.bind(this);\n    \n  }\n\t\n\thandleClear() {\n\t\tthis.setState({\n\t\t\tdisplay: '0',\n      currentNum: '0',\n\t\t\tpreviousInput: null,\n\t\t\tevaluated: true\n\t\t});\n\t}\n\t\n\thandleNumbers(e) {\n    const val = e.target.value;\n    const {display, evaluated, currentNum} = this.state;\n    if (currentNum.length >= 10) return;\n\t\tthis.setState({\n\t\t\tdisplay: (evaluated) \n\t\t\t\t? val \n\t\t\t\t: display + val,\n\t\t\tpreviousInput: val,\n      evaluated: false,\n      currentNum: (evaluated) \n        ? val \n        : currentNum + val,\n\t\t});\n  }\n\n  handleZero() {\n    const {display, previousInput, currentNum} = this.state;\n    if (previousInput === null) return;\n\n    this.setState({\n\t\t\tdisplay: display + \"0\",\n\t\t\tpreviousInput: \"0\",\n\t\t\tevaluated: false,\n      currentNum: currentNum + \"0\"\n\t\t});\n  }\n  \n\thandleOperators(e) {\n\t\tconst val = e.target.value;\n    let nextOp = this.state.display;\n    if (this.state.previousInput === '.') return;\n\t\tif (val === '-'){\n\t\t\tif (this.state.previousInput === '-'){\n\t\t\t\treturn;\n\t\t\t}else{\n\t\t\t\tnextOp += val;\n\t\t\t}\n\t\t}else{\n\t\t\tif (isOperator.test(nextOp.slice(-1)) && isOperator.test(nextOp.slice(-2,nextOp.length-1))){\n\t\t\t\tnextOp = nextOp.slice(0,-2) + val;\n\t\t\t}else if (isOperator.test(this.state.previousInput)){\n\t\t\t\tnextOp = nextOp.slice(0,-1) + val;\n\t\t\t}else{\n\t\t\t\tnextOp += val;\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tdisplay: nextOp,\n\t\t\tpreviousInput: val,\n\t\t\tevaluated: false,\n      currentNum: \"0\"\n\t\t});\n  }\n  \n\thandleEquals() {\n    if (isOperator.test(this.state.previousInput)) return;\n    if(this.state.previousInput === \".\") return;\n\t\tthis.setState({\n\t\t\tdisplay: eval((this.state.display)).toString(),\n\t\t\tpreviousInput: null,\n\t\t\tevaluated: true,\n      currentNum: eval((this.state.display)).toString()\n\t\t});\n  }\n  \n\thandleDecimal() {\n    if (this.state.currentNum.includes(\".\")) return;\n\t\tthis.setState({\n\t\t\tdisplay: this.state.display + \".\",\n\t\t\tpreviousInput: '.',\n\t\t\tevaluated: false,\n      currentNum: this.state.currentNum + \".\"\n\t\t});\n  }\n  \n  render(){\n    const displayFontSize = (this.state.display.length > 15) ? \"small\" : \"large\";\n    return (\n      <div className=\"App\">\n        <Navbar/>\n  \n        <header className=\"App-header\">\n          React Calculator App\n        </header>\n  \n        <div className=\"App-body\">\n          <div className=\"Calculator\">\n            <div className=\"Screen\">\n              <div className={\"Screen-display \" + displayFontSize}>\n                {this.state.display}\n              </div>\n              {/* <div className=\"Screen-input\">\n                {this.state.currentNum}\n              </div> */}\n            </div>\n            <div className=\"Buttons\">\n              <Button id='clear' value='AC' onClick={this.handleClear}/>\n              <Button id='divide' value='/' onClick={this.handleOperators} className='btn-operator'/>\n              <Button id='multiply' value='*' onClick={this.handleOperators} className='btn-operator'/>\n              <Button id='seven' value='7' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='eight' value='8' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='nine' value='9' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='subtract' value='-' onClick={this.handleOperators} className='btn-operator'/>\n              <Button id='four' value='4' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='five' value='5' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='six' value='6' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='add' value='+' onClick={this.handleOperators} className='btn-operator'/>\n              <Button id='one' value='1' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='two' value='2' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='three' value='3' onClick={this.handleNumbers} className='btn-number'/>\n              <Button id='equals' value='=' onClick={this.handleEquals}/>\n              <Button id='zero' value='0' onClick={this.handleZero} className='btn-number'/>\n              <Button id='decimal' value='.' onClick={this.handleDecimal} className='btn-number'/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}